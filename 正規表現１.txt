さくらeditor

javaファイルが抽出される

検索文字:email_notification
ファイル名:*.* !*.class !*.xml
ディレクトリ:C:\workspace\src_test\v1004_8



 おー+い
おーい  おーーい  おーーーーい
+  最低でも１個は + の直前の文字がないといけません


おー?い
おい  おーい 
?  の場合は、直前の文字がまったくないか、１つだけあるという意味です。
------------------------------------
(ab).*(vf)

abvfcaaaabvfkkkkbfabkjiji
abcaaaddavvbbvfkkkkkjiji
abssssssssssssssssssvf

-----------★-------------------------
^([- ,_a-zA-Z0-9\\w]+?)=(.*?)$

(.*?)$
^([- ,_a-zA-Z0-9\\w]+?)
↓
1もじだけ　？だから
↓
abc=kk
-bgr=kk
,d=kk
 sssss=kk
%ggg=kk


-----------★-------------------------

(neko)*sakana

nekosakana
nekonekosakananekosakana

nekossssssssssssssssakana

nekoaaaaaasakana
nekonekonekoasakana

------------------------------------




@@@url:absasdasdasc@@@



@@@url:([^@]*)@@@
＠以外でなんでも


@@@url:([acd]*)@@@
1文字


@@@url:([^@]*)@@@

@@@url:(aaaaa)@@@
@@@url:(@aaaa)@@@
@@@url:(aaaa@)@@@
@@@url:(aa@ac)@@@
@@@url:(a123a)@@@



[ABC^]
A,B,C,^ のいずれかの文字。^はメタ文字ではない。




^@@@(url|urlprotocol|urldomain|urlport|urlpathquery|urlpath|urlquery)@@@$

^@@@(title|content|summary|author|keywords|description|created|updated|published|created_by|updated_by|published_by|image1|image2|image3|file1|file2|file3|link1|link2|link3)@@@$


^@@@(content|summary)\.html@@@$



@@@content.html@@@



((###(([^#<>]+?)(\.[a-zA-Z]+)?)###)|(@@@(([a-zA-Z0-9%\w][- a-zA-Z0-9%\w]*?)([_.]((?!@@@)[^.])+)?)@@@)|(@@@((list)([:]((?!@@@).)+)?)@@@))




たとえば、HTMLのタグを消す場合、このように書いたとします。（Perlの置換文法）

s/<.+>//g

これでタグは消えるのですが、タグだけではなく、タグに挟まれた間の文字まで消してしまいます。（下線部分）


<P>abc</P>

<Psasasa>aaaassssss<poiuh>



最長
<.+>

最短
<.+?>


* 0 or 1以上　　　　複数
+ 1以上　　　　　　複数
? 0 or 1　1回

理由は最長一致モードで動作しているからです

動作をみると、途中に「>」が出てきているのですが、そこでは止まらず、最後の「>」までマッチしています。
つまり最長一致とは、できるだけ長くマッチングさせるという意味になります。
これを防ぐためには、以下のように、「>」の前に「?」（最短一致記号）をつけます。


こうすることにより「<」の後に出てくる、最初の「>」までとなり、タグ1つ分しか消さなくなります。
下線部分のようにタグだけにマッチングします。

----------------------------------------------------------

^(?!元SMAP).*$
^(?=元SMAP).*$


元SMAPの香取はジャニーズから独立する
元APPの反町はジャニーズから独立する
元SMAPの松井はジャニーズから独立する
元APPの石井はジャニーズから独立する


// 香取を含む１行
^(?=.*香取).*$

否定先読みを使って、「香取」を含まない１行をマッチングしようとしてみます。
// 香取を含まない１行
^(?!.*香取).*$




ghudhushifusabcfjoifjwoifjw
abc
gjofgjosgjso
sfkspdfksp
dakpdkaabcabc

abcを含まない行
^(?!.*abc).*$

「abc」または「efg」という文字列を含まない行にマッチする。
^(?!.*(abc|efg)).*$



dakpdkaabcabc
dadefkaabcabc
dakpdkaabcabc
sasasdasdas


?を含むが、?を含まない
「abc」を含み、「def」を含まない行にマッチする。

^(?=.*abc)(?!.*def).*$


①^$
②^.*$
③^(?!.*def).*$
④^(?=.*abc)(?!.*def).*$
⑤


view:50px


-------------------------------------------------

mycolumnname = mycolumn.replaceAll("^(.+):(.+)$", "$1");

("^(.+):(.+)$", "$1")


置換前　　　　　(.+):(.+)$
置換後　　　　　$2aaaa$1

↓
50pxaaaaview





